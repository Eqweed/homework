
===============================================
Tack 1
===============================================

Создайте класс Clock со свойством time и 
  методом showTime(), которой выводит time в консоли.
  
  
  Добавьте классу Clock статический метод convertTime(ms). 
  Он получает кол-во миллисекунд и возвращает дату с помощью Date.
  return new Date(ms)
  
  То есть будет возможность вызвать Clock.convertTime(111111) 
  и получить обратно дату.
  
  Создайте класс Timer, наследующий от Clock. 
  Класс Timer должен иметь сообственное свойство 
  interval и метод countTime().
*/


===============================================
Tack 2
===============================================

/*
  Напишите скрипт для создания списка ul.
  
  Для каждого пункта:
    - Запрашивайте содержимое пункта li у пользователя с помощью prompt.
    - Создавайте пункт и добавляйте его к ul.
    - Процесс прерывается, когда пользователь нажимает Cancel.
    - Все элементы списка должны создаваться динамически.
    - Если пользователь вводит строки с тегами – пусть в списке 
      они показываются как обычный текст.
*/

===============================================
Tack 3
===============================================

/*
  Создайте функцию createPostCard(), которая 
  создает и возвращает DOM-узел карточки поста.
  
  Разметка с классами есть на вкладке HTML.
  Стили на вкладке CSS.
  
  Используйте createElement для создания узлов.
  Добавьте классы и атрибуты.
*/

===============================================
Tack 4
===============================================

/*
  Напишите HTML-документе уже есть тег с id="root" 
  
  Создайте функцию createBoxes(num), которая принимает 1 параметр num - число.
  
  Функция создает столько div, сколько указано в num и возвращает их в одном
  общем контейнере. После чего необходимо повесить результат работы функции
  в div с id="#root"
  
  Каждый div:
    - Имеет случайный rgb цвет фона
    - Размеры самого первого div - 30px на 30px.
    - Каждый следующий div после первого, должен быть шире и выше предыдущего
      на 10px
*/
===============================================
Tack 5
===============================================

/*
  
  По умолчанию модальное окно скрыто классом modal-hidden.
  
  Напишите скрипт который реализует следующее поведение:
 
  - При клике на кнопке с надписью "Open Modal" 
    и классом js-open-modal, модальное окно с классом modal, 
    должно появляться, тобишь необходимо убрать класс modal-hidden. 
    Для выбора модального модального окна используйте класс js-modal-backdrop
 
  - При открытом модальном окне, клик на кнопку с крестиком (js-close-modal)
    или на серый фон с прозрачностью (js-modal-backdrop), 
    модальное окно должно закрываться.
    
  
  Задание повышеной сложности:
  - Попробуйте реализовать плагин функционала модального окна используя класс.
    При создании экземпляра необходимо передать селекторы для кнопки закрытия окна
    и самого прозрачного фона. Плагин должен реализовавать два метода show и hide,
    либо один toggle.
    
    При клике на кнопку показа модального окна должен вызываться 
    метод show или toggle. Соответственно при для закрытия 
    окна hide либо toggle.
*/

===============================================
Tack 6
===============================================

Напишите скрипт который:
    - При клике по изображению, меняет значение атрибута alt на 'Image has been clicked on!'
    - При клике по изображению, выводит alert со значением атрибута src
    
    - При клике на ссылку с надписью Google, в консоль выводится значение атрибута href.
    - Каждый клик по ссылке должен поочередно добавлять и удалять класс link-active
    - При этом не должен происходить переход по ссылке!
    
    - При фокусе текстового поля, в консоль должна выводится строка "Input is in focus!"
    - При наборе текста в текстовое поле, текущее его значение должно отображаться в
      абзаце с классом js-input-value
